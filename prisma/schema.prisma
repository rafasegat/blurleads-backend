generator client {
  provider = "prisma-client-js"
}


datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  name          String?
  company       String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  clients       Client[]
  integrations  Integration[]
  leads         Lead[]
  notifications Notification[]

  @@map("users")
}

model Client {
  id            String         @id @default(cuid())
  name          String
  website       String
  apiKey        String         @unique
  isActive      Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  userId        String
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  integrations  Integration[]
  leads         Lead[]
  notifications Notification[]
  visitors      Visitor[]

  @@map("clients")
}

model Company {
  id              String    @id @default(cuid())
  domain          String?   @unique
  name            String?
  industry        String?
  size            String?
  location        String?
  country         String?
  city            String?
  revenue         String?
  linkedin        String?
  twitter         String?
  facebook        String?
  description     String?
  logo            String?
  employees       Int?
  founded         String?
  technologies    String?
  ipRanges        String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  alexaGlobalRank Int?
  countryCode     String?
  crunchbase      String?
  domainAliases   String?
  duns            String?
  ein             String?
  emailAddresses  String?
  foundedYear     Int?
  industryGroup   String?
  lat             Float?
  legalName       String?
  lng             Float?
  parent          String?
  phoneNumbers    String?
  postalCode      String?
  raised          BigInt?
  sector          String?
  state           String?
  stateCode       String?
  streetAddress   String?
  subIndustry     String?
  tags            String?
  timeZone        String?
  trafficRank     String?
  type            String?
  ultimateParent  String?
  utcOffset       Int?
  leads           Lead[]
  visitors        Visitor[]

  @@map("companies")
}

model Visitor {
  id         String   @id @default(cuid())
  ipAddress  String?
  userAgent  String?
  referrer   String?
  pageUrl    String
  sessionId  String
  timestamp  DateTime @default(now())
  clientId   String
  isEnriched Boolean  @default(false)
  companyId  String?
  leads      Lead[]
  client     Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  company    Company? @relation(fields: [companyId], references: [id])

  @@map("visitors")
}

model Lead {
  id                String           @id @default(cuid())
  email             String?
  firstName         String?
  lastName          String?
  company           String?
  title             String?
  phone             String?
  linkedinUrl       String?
  facebookUrl       String?
  instagramUrl      String?
  twitterUrl        String?
  website           String?
  location          String?
  industry          String?
  companySize       String?
  revenue           String?
  description       String?
  score             Int              @default(0)
  status            LeadStatus       @default(NEW)
  source            String?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  clientId          String
  visitorId         String?
  userId            String
  companyId         String?
  enrichments       EnrichmentData[]
  client            Client           @relation(fields: [clientId], references: [id], onDelete: Cascade)
  identifiedCompany Company?         @relation(fields: [companyId], references: [id])
  user              User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  visitor           Visitor?         @relation(fields: [visitorId], references: [id])

  @@map("leads")
}

model EnrichmentData {
  id         String   @id @default(cuid())
  provider   String
  data       Json
  confidence Float?
  createdAt  DateTime @default(now())
  leadId     String
  lead       Lead     @relation(fields: [leadId], references: [id], onDelete: Cascade)

  @@map("enrichment_data")
}

model Integration {
  id        String          @id @default(cuid())
  type      IntegrationType
  name      String
  config    Json
  isActive  Boolean         @default(true)
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  clientId  String
  userId    String
  client    Client          @relation(fields: [clientId], references: [id], onDelete: Cascade)
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("integrations")
}

model Notification {
  id        String           @id @default(cuid())
  type      NotificationType
  title     String
  message   String
  data      Json?
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())
  clientId  String
  userId    String
  client    Client           @relation(fields: [clientId], references: [id], onDelete: Cascade)
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

enum LeadStatus {
  NEW
  CONTACTED
  QUALIFIED
  CONVERTED
  LOST
}

enum IntegrationType {
  CRM
  EMAIL_MARKETING
  SLACK
  WEBHOOK
  SALESFORCE
  HUBSPOT
  PIPEDRIVE
}

enum NotificationType {
  NEW_LEAD
  ENRICHMENT_COMPLETE
  INTEGRATION_ERROR
  SYSTEM_ALERT
}
